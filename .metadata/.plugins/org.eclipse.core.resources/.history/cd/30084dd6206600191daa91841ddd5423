package com.gmail.a.a.kravchenko;

public class Triangle extends Shape {
	private Point pointA;
	private Point pointB;
	private Point pointC;

	public Triangle(Point pointA, Point pointB, Point pointC) throws IllegalArgumentException {
		super();
		this.name = "Triangle";
		try {
			toCheckConditionTriangle(pointA, pointB, pointC);
			toInitialize(pointA, pointB, pointC);
		} catch (IllegalArgumentException e) {
			System.out.println(e.getMessage());
			System.out.println("You must specify the correct coordinates of the vertices of the triangle");
			throw e;
		}
	}

	public Triangle(Point[] points) throws IllegalArgumentException {
		super();
		this.name = "Triangle";
		try {
			toCheckConditionTriangle(pointA, pointB, pointC);
			toInitialize(points);
		} catch (IllegalArgumentException e) {
			System.out.println(e.getMessage());
			System.out.println("You must specify the correct coordinates of the vertices of the triangle");
			throw e;
		}
	}

	private void toInitialize(Point pointA, Point pointB, Point pointC) {
		this.pointA = pointA;
		this.pointB = pointB;
		this.pointC = pointC;
	}

	private void toInitialize(Point[] points) {
		this.pointA = points[0];
		this.pointB = points[1];
		this.pointC = points[2];
	}

	public Point getPointA() {
		return pointA;
	}

	public void setPointA(Point pointA) {
		this.pointA = pointA;
	}

	public Point getPointB() {
		return pointB;
	}

	public void setPointB(Point pointB) {
		this.pointB = pointB;
	}

	public Point getPointC() {
		return pointC;
	}

	public void setPointC(Point pointC) {
		this.pointC = pointC;
	}

	@Override
	public String toString() {
		return "Triangle [pointA=" + pointA + ", pointB=" + pointB + ", pointC=" + pointC + "]";
	}

	public double getSideAB() {
		return pointA.getLeinght(pointB);
	}

	public double getSideAC() {
		return pointA.getLeinght(pointC);
	}

	public double getSideBC() {
		return pointB.getLeinght(pointC);
	}

	private void toCheckConditionTriangle(Point pointA, Point pointB, Point pointC) throws IllegalArgumentException {
		double sideAB = pointA.getLeinght(pointB);
		double sideAC = pointA.getLeinght(pointC);
		double sideBC = pointB.getLeinght(pointC);
		if (((sideAC + sideBC) > sideAB) || ((sideAB + sideBC) > sideAC) || ((sideAB + sideAC) > sideBC)) {
			return;
		} else {
			throw new IllegalArgumentException("Was input illegal argument for triangle construction");
		}
	}

	public double getPerimetr() {
		if (getSideAB() == 0 || getSideAC() == 0 || getSideBC() == 0) {
			return 0;
		}
		return getSideAB() + getSideAC() + getSideBC();
	}

	public double getArea() {
		if (getSideAB() == 0 || getSideAC() == 0 || getSideBC() == 0) {
			return 0;
		}
		double semiPerimetr;
		semiPerimetr = getPerimetr() / 2;
		return Math.sqrt(semiPerimetr * (semiPerimetr - getSideAB()) * (semiPerimetr - getSideAC())
				* (semiPerimetr - getSideBC()));
	}

}
